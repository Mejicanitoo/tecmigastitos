import streamlit as st
import pandas as pd
import altair as alt
from datetime import date
import os

# CONFIGURACI√ìN DE LA P√ÅGINA INICIAL
st.set_page_config(page_title="Tecmi Gastitos / Gestor de gastos estudiantiles", page_icon="üí∏", layout="wide")
st.title("üí∏ Gestor de Gastos Estudiantiles / Tecmi Gastitos")
st.divider()

# --- FUNCIONES PARA CARGAR Y GUARDAR DATOS ---
def cargar_datos(filename="registros.csv"):
    """Carga los datos desde un archivo CSV. Si no existe, crea un DataFrame vac√≠o."""
    if os.path.exists(filename):
        try:
            df = pd.read_csv(filename, parse_dates=['Fecha'])
            return df
        except Exception as e:
            st.error(f"Error al cargar los datos: {e}")
            return pd.DataFrame(columns=["Fecha", "Categor√≠a", "Monto", "Descripci√≥n"])
    return pd.DataFrame(columns=["Fecha", "Categor√≠a", "Monto", "Descripci√≥n"])

def guardar_datos(df, filename="registros.csv"):
    """Guarda el DataFrame en un archivo CSV."""
    try:
        df.to_csv(filename, index=False)
    except Exception as e:
        st.error(f"Error al guardar los datos: {e}")

# --- INICIALIZAR DATAFRAME EN SESSION STATE ---
# Carga los datos desde el archivo al iniciar la sesi√≥n.
if "gastos" not in st.session_state:
    st.session_state["gastos"] = cargar_datos()

# --- BARRA MENU ---
with st.sidebar:
    st.image("https://media.discordapp.net/attachments/1301396281385811979/1419894154598813758/Diseno_sin_titulo_6.png?ex=68d60dfa&is=68d4bc7a&hm=d4b4a14075b17eafd7246ca446bd510ed7832fe05d908e333fd663cec1af4b67&=&format=webp&quality=lossless")
    st.divider()
    st.header("Men√∫")
    page = st.radio(
        "Ir a:",
        ["**Registro**", "**Historial**", "**An√°lisis**"], # Opciones actualizadas para la navegaci√≥n
        index=0
    )
    st.divider()
    st.caption("COMO FUNCIONA `TECMIGASTITOS`")
    st.caption("**Registro:** Registrar tus gastos")
    st.caption("**Historial:** Historial de tus gastos registrados")
    st.caption("**An√°lisis:** An√°lisis y reportes de gastos totales registrados")
    st.divider()
    st.caption("üíµ TECMI GASTITOS / 2025 üíµ")
# --- P√ÅGINA DE REGISTRO ---
if page == "**Registro**":
    st.header("‚ûï Registrar nuevo gasto")

    with st.form("form_gasto"):
        fecha = st.date_input("üóìÔ∏èFecha", value=date.today())
        categoria = st.selectbox("üîñCategor√≠a", [
            "Alimentaci√≥n", "Transporte", "Renta", "Colegiatura",
            "Libros y Material", "Salud", "Entretenimiento", "Servicios", "Otros"
        ])
        monto = st.number_input("üí≤Monto (MXN)", min_value=0.0, step=1.0)
        descripcion = st.text_input("üìùDescripci√≥n (opcional)")
        
        submit = st.form_submit_button("Agregar gasto")

    if submit:
        # Validar que el monto sea mayor a cero
        if monto > 0:
            nuevo = pd.DataFrame(
                [[fecha, categoria, monto, descripcion]],
                columns=["Fecha", "Categor√≠a", "Monto", "Descripci√≥n"]
            )
            # Asegurar que la columna Fecha sea de tipo datetime para ordenarla despu√©s
            nuevo['Fecha'] = pd.to_datetime(nuevo['Fecha'])
            
            st.session_state["gastos"] = pd.concat([st.session_state["gastos"], nuevo], ignore_index=True)
            guardar_datos(st.session_state["gastos"]) # Guardar los datos en el archivo
            st.success("‚úÖ Gasto agregado correctamente")
        else:
            st.warning("‚ö†Ô∏è El monto debe ser mayor a $0.00")

# --- P√ÅGINA DE HISTORIAL ---
elif page == "**Historial**":
    st.header("üìä Historial de gastos")
    
    if not st.session_state["gastos"].empty:
        # Asegurarse que la columna Fecha es datetime para poder ordenarla
        st.session_state["gastos"]['Fecha'] = pd.to_datetime(st.session_state["gastos"]['Fecha'])
        
        # Ordenar los gastos del m√°s reciente al m√°s antiguo
        gastos_mostrados = st.session_state["gastos"].sort_values(by="Fecha", ascending=False).reset_index(drop=True)
        
        # Crear una copia para evitar advertencias de Streamlit al modificarla
        df_display = gastos_mostrados.copy()
        # Formatear la fecha para mostrarla sin la hora
        df_display['Fecha'] = df_display['Fecha'].dt.strftime('%Y-%m-%d')
        
        st.dataframe(df_display, use_container_width=True)
        
        st.divider()
        
        # --- SECCI√ìN PARA ELIMINAR GASTOS ---
        st.subheader("üóëÔ∏è Eliminar un gasto")
        if not gastos_mostrados.empty:
            indices_para_eliminar = st.multiselect(
                "Selecciona el(los) √≠ndice(s) del gasto a eliminar:",
                options=gastos_mostrados.index.tolist(),
                format_func=lambda x: f"√çndice {x} - {gastos_mostrados.loc[x, 'Fecha'].strftime('%Y-%m-%d')} - ${gastos_mostrados.loc[x, 'Monto']:.2f} - {gastos_mostrados.loc[x, 'Categor√≠a']}"
            )
            
            if st.button("Eliminar gastos seleccionados"):
                if indices_para_eliminar:
                    st.session_state["gastos"] = st.session_state["gastos"].drop(indices_para_eliminar).reset_index(drop=True)
                    guardar_datos(st.session_state["gastos"]) # Guardar los datos despu√©s de eliminar
                    st.success("Gasto(s) eliminado(s) correctamente.")
                    st.rerun() # Recargar la p√°gina para ver el cambio
                else:
                    st.warning("No has seleccionado ning√∫n gasto para eliminar.")
    else:
        st.info("A√∫n no has registrado ning√∫n gasto. Ve a la secci√≥n 'Registro' para empezar.")

# --- P√ÅGINA DE AN√ÅLISIS ---
elif page == "**An√°lisis**":
    st.header("üìà An√°lisis de Gastos")

    if not st.session_state["gastos"].empty:
        # Asegurarse que la columna Fecha es datetime
        df_analisis = st.session_state["gastos"].copy()
        df_analisis['Fecha'] = pd.to_datetime(df_analisis['Fecha'])
        
        # --- TABLA BONITA: RESUMEN POR CATEGOR√çA ---
        st.subheader("üìã Resumen de gastos por categor√≠a")
        resumen = df_analisis.groupby("Categor√≠a", as_index=False)["Monto"].sum().sort_values(by="Monto", ascending=False)

        # Estilo bonito con pandas Styler
        styled_resumen = resumen.style.background_gradient(cmap="Blues").format({"Monto": "${:,.2f}"})
        st.write(styled_resumen)
        st.divider()

        # --- GR√ÅFICOS ---
        col1, col2 = st.columns(2)
        
        with col1:
            # --- GR√ÅFICO DE BARRAS DE GASTOS POR CATEGOR√çA ---
            st.subheader("üìä Gr√°fico de barras")
            chart = alt.Chart(resumen).mark_bar().encode(
                x=alt.X('Monto', type='quantitative', title='Monto Total (MXN)'),
                y=alt.Y('Categor√≠a', type='nominal', title='Categor√≠a', sort='-x'),
                color=alt.Color('Categor√≠a', legend=None),
                tooltip=['Categor√≠a', 'Monto']
            ).properties(
                title='Gastos Totales por Categor√≠a'
            )
            st.altair_chart(chart, use_container_width=True)

        with col2:
            # --- GR√ÅFICO DE PASTEL (DONUT) ---
            st.subheader("üç© Gr√°fico de pastel")
            pie_chart = alt.Chart(resumen).mark_arc(innerRadius=50).encode(
                theta=alt.Theta(field="Monto", type="quantitative"),
                color=alt.Color(field="Categor√≠a", type="nominal", title="Categor√≠a"),
                tooltip=['Categor√≠a', 'Monto']
            ).properties(
                title='Distribuci√≥n de Gastos'
            )
            st.altair_chart(pie_chart, use_container_width=True)
            
        st.divider()
        
        # --- AN√ÅLISIS POR FECHA ---
        st.subheader("üìÖ Gastos a lo largo del tiempo")
        line_chart = alt.Chart(df_analisis).mark_line(point=True).encode(
            x=alt.X('Fecha', type='temporal', title='Fecha'),
            y=alt.Y('Monto', type='quantitative', title='Monto (MXN)'),
            tooltip=['Fecha', 'Monto', 'Categor√≠a', 'Descripci√≥n']
        ).properties(
            title='Gastos Registrados por D√≠a'
        ).interactive()
        
        st.altair_chart(line_chart, use_container_width=True)

    else:
        st.info("No hay datos para analizar. Registra algunos gastos primero.")
